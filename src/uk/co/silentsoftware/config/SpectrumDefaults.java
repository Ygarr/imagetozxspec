/* Image to ZX Spec
 * Copyright (C) 2014 Silent Software (Benjamin Brown)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package uk.co.silentsoftware.config;

import java.awt.Color;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import uk.co.silentsoftware.core.converters.image.processors.GigaScreenAtrribute;

/**
 * ZX Spectrum constants
 */
public class SpectrumDefaults {

	/**
	 * The size of Spectrum the colour "blocks" (8x8 pixels default)
	 */
	public static final int ATTRIBUTE_BLOCK_SIZE = 8;
	
	/**
	 * The spectrum screen width in pixels
	 */
	public static final int SCREEN_WIDTH = 256;
	
	/**
	 * The spectrum screen height in pixels
	 */
	public static final int SCREEN_HEIGHT = 192;
	
	/**
	 * 1/3 of the spectrum screen height in pixels
	 */
	public static final int SCREEN_HEIGHT_THIRD = SCREEN_HEIGHT/3;
	
	/**
	 * The number of character colour rows
	 */
	public static final int ROWS = SCREEN_HEIGHT/ATTRIBUTE_BLOCK_SIZE;
	
	/**
	 * The number of character colour columns
	 */
	public static final int COLUMNS = SCREEN_WIDTH/ATTRIBUTE_BLOCK_SIZE;
	
	/**
	 * Spectrum black (both bright/half bright set)
	 */
	public static final int BLACK = 0xFF000000;
	
	/**
	 * Spectrum white (full bright set)
	 */
	public static final int WHITE = 0xFFFFFFFF;
	
	/**
	 * Spectrum white (half bright set)
	 */
	public static final int HALF_WHITE = 0xFFCDCDCD;
		
	
	/**
	 * Spectrum's full bright colour set
	 */
	public static final int[] SPECTRUM_COLOURS_BRIGHT;
	static {
		SPECTRUM_COLOURS_BRIGHT = new int[] {
			0xFF000000,
			0xFF0000FF, 	
			0xFFFF0000, 	
			0xFFFF00FF,
			0xFF00FF00, 	
			0xFF00FFFF,
			0xFFFFFF00, 
			0xFFFFFFFF
		};
	}
	/**
	 * Spectrum's half bright colour set
	 */
	public static final int[] SPECTRUM_COLOURS_HALF_BRIGHT;
	static {
		SPECTRUM_COLOURS_HALF_BRIGHT = new int[] {
		0xFF000000,
		0xFF0000CD,	
		0xFFCD0000,
		0xFFCD00CD,
		0xFF00CD00, 	
		0xFF00CDCD,
		0xFFCDCD00,
		0xFFCDCDCD
		};
	}
	
	/**
	 * Spectrum's primary colours minus magenta and teal.
	 */
	public static final int[] SPECTRUM_COLOURS_REDUCED_HALF_BRIGHT;
	static {
		SPECTRUM_COLOURS_REDUCED_HALF_BRIGHT = new int[] {
		0xFF000000,
		0xFF0000CD,	
		0xFFCD0000,
		0xFF00CD00, 	
		0xFFCDCD00,
		0xFFCDCDCD
		};
	}
	
	/**
	 * All Spectrum colours
	 */
	public static final int[] SPECTRUM_COLOURS_ALL;
	static {
		SPECTRUM_COLOURS_ALL= new int[] {
		0xFF000000,
		0xFF0000CD,
		0xFF0000FF,
		0xFFCD0000,
		0xFFFF0000,	
		0xFFCD00CD,
		0xFFFF00FF,
		0xFF00CD00, 
		0xFF00FF00,
		0xFF00CDCD,
		0xFF00FFFF,
		0xFFCDCD00,
		0xFFFFFF00, 
		0xFFCDCDCD,
		0xFFFFFFFF
		};
	}
		
	/**
	 * The GigaScreen persistence of vision colours generated by flashing two screens.
	 */
	public static final int[] GIGASCREEN_COLOURS_ALL;
	static {
		GIGASCREEN_COLOURS_ALL = new int[] {
			0xff00ffff, // 0xff00ffff, 0xff00ffff
			0xff0000ff, // 0xff0000ff, 0xff0000ff
			0xffe60066, // 0xffcd00cd, 0xffff0000
			0xff7f7f7f, // 0xffffffff, 0xff000000
			0xff007fff, // 0xff00ffff, 0xff0000ff
			0xffe67f66, // 0xffffff00, 0xffcd00cd
			0xff7fff7f, // 0xffffffff, 0xff00ff00
			0xff7f007f, // 0xffff00ff, 0xff000000
			0xff007fe6, // 0xff00ffff, 0xff0000cd
			0xffe67f7f, // 0xffffffff, 0xffcd0000
			0xff6600e6, // 0xffcd00cd, 0xff0000ff
			0xff7f0066, // 0xffff0000, 0xff0000cd
			0xffff7fff, // 0xffffffff, 0xffff00ff
			0xff0000e6, // 0xff0000ff, 0xff0000cd
			0xffe6007f, // 0xffff00ff, 0xffcd0000
			0xff667fe6, // 0xff00ffff, 0xffcd00cd
			0xff7f7f66, // 0xffffff00, 0xff0000cd
			0xffff00ff, // 0xffff00ff, 0xffff00ff
			0xffffffff, // 0xffffffff, 0xffffffff
			0xff00667f, // 0xff00cd00, 0xff0000ff
			0xff66e67f, // 0xffcdcd00, 0xff00ffff
			0xffe666e6, // 0xffcdcdcd, 0xffff00ff
			0xff00e67f, // 0xff00ffff, 0xff00cd00
			0xff66667f, // 0xffcdcd00, 0xff0000ff
			0xffe6e6e6, // 0xffffffff, 0xffcdcdcd
			0xff0000cd, // 0xff0000cd, 0xff0000cd
			0xffcd6666, // 0xffcdcdcd, 0xffcd0000
			0xff00e666, // 0xff00cdcd, 0xff00ff00
			0xff7f66e6, // 0xff00cdcd, 0xffff00ff
			0xff666666, // 0xffcdcdcd, 0xff000000
			0xffcd00cd, // 0xffcd00cd, 0xffcd00cd
			0xff006666, // 0xff00cdcd, 0xff000000
			0xff6600cd, // 0xffcd00cd, 0xff0000cd
			0xff7fe6e6, // 0xffffffff, 0xff00cdcd
			0xff66e666, // 0xffcdcdcd, 0xff00ff00
			0xffcd6600, // 0xffcdcd00, 0xffcd0000
			0xff00e600, // 0xff00ff00, 0xff00cd00
			0xff666600, // 0xffcdcd00, 0xff000000
			0xff006600, // 0xff00cd00, 0xff000000
			0xff66e600, // 0xffcdcd00, 0xff00ff00
			0xffe60000, // 0xffff0000, 0xffcd0000
			0xffe67f00, // 0xffffff00, 0xffcd0000
			0xff7fff00, // 0xffffff00, 0xff00ff00
			0xff00cdcd, // 0xff00cdcd, 0xff00cdcd
			0xff7f0000, // 0xffff0000, 0xff000000
			0xff66cdcd, // 0xffcdcdcd, 0xff00cdcd
			0xffcdcdcd, // 0xffcdcdcd, 0xffcdcdcd
			0xff7f7f00, // 0xffffff00, 0xff000000
			0xff007f7f, // 0xff00ffff, 0xff000000
			0xff66007f, // 0xffcd0000, 0xff0000ff
			0xffe67fe6, // 0xffffffff, 0xffcd00cd
			0xff7f00ff, // 0xffff00ff, 0xff0000ff
			0xff7fffff, // 0xffffffff, 0xff00ffff
			0xff00007f, // 0xff0000ff, 0xff000000
			0xff00ff7f, // 0xff00ffff, 0xff00ff00
			0xff667f7f, // 0xff00ffff, 0xffcd0000
			0xffe600e6, // 0xffff00ff, 0xffcd00cd
			0xff7f7fff, // 0xffffffff, 0xff0000ff
			0xff000066, // 0xff0000cd, 0xff000000
			0xffcd66cd, // 0xffcdcdcd, 0xffcd00cd
			0xff667f66, // 0xff00ff00, 0xffcd00cd
			0xffffff7f, // 0xffffffff, 0xffffff00
			0xff6666cd, // 0xffcdcdcd, 0xff0000cd
			0xff7f7fe6, // 0xffffffff, 0xff0000cd
			0xffff007f, // 0xffff00ff, 0xffff0000
			0xffcd0066, // 0xffcd00cd, 0xffcd0000
			0xff007f66, // 0xff00ff00, 0xff0000cd
			0xff0066cd, // 0xff00cdcd, 0xff0000cd
			0xff660066, // 0xffcd00cd, 0xff000000
			0xff7f00e6, // 0xffff00ff, 0xff0000cd
			0xffff7f7f, // 0xffffffff, 0xffff0000
			0xff7f667f, // 0xff00cd00, 0xffff00ff
			0xffe6e666, // 0xffcdcdcd, 0xffffff00
			0xff7fe67f, // 0xffffffff, 0xff00cd00
			0xffe66666, // 0xffcdcdcd, 0xffff0000
			0xff0066e6, // 0xff00cdcd, 0xff0000ff
			0xff7fe666, // 0xffffff00, 0xff00cdcd
			0xffe6667f, // 0xffcdcd00, 0xffff00ff
			0xff00cd00, // 0xff00cd00, 0xff00cd00
			0xff66e6e6, // 0xffcdcdcd, 0xff00ffff
			0xff66cd00, // 0xffcdcd00, 0xff00cd00
			0xff00e6e6, // 0xff00ffff, 0xff00cdcd
			0xff7f6666, // 0xff00cdcd, 0xffff0000
			0xffcdcd00, // 0xffcdcd00, 0xffcdcd00
			0xffe6e67f, // 0xffffffff, 0xffcdcd00
			0xff6666e6, // 0xffcdcdcd, 0xff0000ff
			0xffe6e600, // 0xffffff00, 0xffcdcd00
			0xffe66600, // 0xffcdcd00, 0xffff0000
			0xff7fe600, // 0xffffff00, 0xff00cd00
			0xff00cd66, // 0xff00cdcd, 0xff00cd00
			0xff66cd66, // 0xffcdcdcd, 0xff00cd00
			0xff7f6600, // 0xff00cd00, 0xffff0000
			0xffcdcd66, // 0xffcdcdcd, 0xffcdcd00
			0xffff7f00, // 0xffffff00, 0xffff0000
			0xffffff00, // 0xffffff00, 0xffffff00
			0xffff0000, // 0xffff0000, 0xffff0000
			0xff000000, // 0xff000000, 0xff000000
			0xff00ff00, // 0xff00ff00, 0xff00ff00
			0xff667f00, // 0xff00ff00, 0xffcd0000
			0xffcd0000, // 0xffcd0000, 0xffcd0000
			0xff007f00, // 0xff00ff00, 0xff000000
			0xff660000, // 0xffcd0000, 0xff000000
		};
	}
	
	/**
	 * The GigaScreen combinations of 4 base Spectrum colours generated by 
	 * calculating half bright screen 1 colours x half bright screen 2 colours 
	 */
	public static final GigaScreenAtrribute[] GIGASCREEN_HALF_BRIGHT_COMBOS;
	static {
		GIGASCREEN_HALF_BRIGHT_COMBOS = SpectrumDefaults.generateGigascreenCombos(SPECTRUM_COLOURS_HALF_BRIGHT, SPECTRUM_COLOURS_HALF_BRIGHT);
	}
	
	/**
	 * The GigaScreen combinations of 4 base Spectrum colours generated by 
	 * calculating half bright screen 1 colours x full bright screen 2 colours 
	 */
	public static final GigaScreenAtrribute[] GIGASCREEN_MIXED_COMBOS;
	static {
		GIGASCREEN_MIXED_COMBOS = SpectrumDefaults.generateGigascreenCombos(SPECTRUM_COLOURS_HALF_BRIGHT, SPECTRUM_COLOURS_BRIGHT);
	}
	
	/**
	 * The GigaScreen combinations of 4 base Spectrum colours generated by 
	 * calculating full bright screen 1 colours x full bright screen 2 colours 
	 */
	public static final GigaScreenAtrribute[] GIGASCREEN_BRIGHT_COMBOS;
	static {	
		GIGASCREEN_BRIGHT_COMBOS = SpectrumDefaults.generateGigascreenCombos(SPECTRUM_COLOURS_BRIGHT, SPECTRUM_COLOURS_BRIGHT);
	}
	
	/**
	 * Mappings from RGB -> ZX Spectrum palette (technically this is a slightly intermediate step
	 * as the mappings are not all 1 to 1 with the Spectrum palette, but mappings to a bit set used
	 * by the SCR converter).
	 */
	public static final Map<Integer, Integer> SPECTRUM_ARGB = new HashMap<Integer, Integer>(15);
	static {
		SPECTRUM_ARGB.put(0xFF000000, 0);
		SPECTRUM_ARGB.put(0xFF0000CD, 1); SPECTRUM_ARGB.put(0xFF0000FF, 8);
		SPECTRUM_ARGB.put(0xFFCD0000, 2); SPECTRUM_ARGB.put(0xFFFF0000, 9);
		SPECTRUM_ARGB.put(0xFFCD00CD, 3); SPECTRUM_ARGB.put(0xFFFF00FF, 10);
		SPECTRUM_ARGB.put(0xFF00CD00, 4); SPECTRUM_ARGB.put(0xFF00FF00, 11);
		SPECTRUM_ARGB.put(0xFF00CDCD, 5); SPECTRUM_ARGB.put(0xFF00FFFF, 12);
		SPECTRUM_ARGB.put(0xFFCDCD00, 6); SPECTRUM_ARGB.put(0xFFFFFF00, 13);
		SPECTRUM_ARGB.put(0xFFCDCDCD, 7); SPECTRUM_ARGB.put(0xFFFFFFFF, 14);
	}
	
	/**
	 * Mappings from RGB -> Color (caching common colours for use in UI only)
	 */
	public static final Map<Integer, Color> SPECTRUM_COLORS = new HashMap<Integer, Color>(15);
	static {
		SPECTRUM_COLORS.put(0xFF000000, new Color(0xFF000000));
		SPECTRUM_COLORS.put(0xFF0000CD, new Color(0xFF0000CD)); SPECTRUM_COLORS.put(0xFF0000FF, new Color(0xFF0000FF));
		SPECTRUM_COLORS.put(0xFFCD0000, new Color(0xFFCD0000)); SPECTRUM_COLORS.put(0xFFFF0000, new Color(0xFFFF0000));
		SPECTRUM_COLORS.put(0xFFCD00CD, new Color(0xFFCD00CD)); SPECTRUM_COLORS.put(0xFFFF00FF, new Color(0xFFFF00FF));
		SPECTRUM_COLORS.put(0xFF00CD00, new Color(0xFF00CD00)); SPECTRUM_COLORS.put(0xFF00FF00, new Color(0xFF00FF00));
		SPECTRUM_COLORS.put(0xFF00CDCD, new Color(0xFF00CDCD)); SPECTRUM_COLORS.put(0xFF00FFFF, new Color(0xFF00FFFF));
		SPECTRUM_COLORS.put(0xFFCDCD00, new Color(0xFFCDCD00)); SPECTRUM_COLORS.put(0xFFFFFF00, new Color(0xFFFFFF00));
		SPECTRUM_COLORS.put(0xFFCDCDCD, new Color(0xFFCDCDCD)); SPECTRUM_COLORS.put(0xFFFFFFFF, new Color(0xFFFFFFFF));
	}
	
	/**
	 * Utility method to generate gigascreen 4 colour combinations from two palettes (bright and half bright)
	 * 
	 * @param palette1
	 * @param palette2
	 * @return
	 */
	public static GigaScreenAtrribute[] generateGigascreenCombos(int[] palette1, int[] palette2) {
		Set<GigaScreenAtrribute> combos = new HashSet<>();
		for (int inkScreen1 : palette1) {
			for (int paperScreen1 : palette1) {	
				for (int inkScreen2 : palette2) {
					for (int paperScreen2 : palette2) {	
						GigaScreenAtrribute gc = new GigaScreenAtrribute(inkScreen1, paperScreen1, inkScreen2, paperScreen2);
						if (gc.getUniqueColourCount() > 3) {
							combos.add(gc);
						}
					}
				}
			}
		}
		return combos.toArray(new GigaScreenAtrribute[]{});
	}
}